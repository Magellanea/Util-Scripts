#!/usr/bin/env python
import subprocess
import dropbox
import ConfigParser


class Style:
    @staticmethod
    def warning_msg(s):
        """
        Returns an ANSI-Colored warning message
        @param s: The warning content
        """
        return "%s%s%s%s %s" %\
               (Style.BOLD_ON, Style.RED, "WARNING:",
                Style.RESET, s)
    @staticmethod
    def success_msg(s):
        """
        Returns an ANSI-Colored success message
        @param s: The msg content
        """
        return "%s%s%s%s %s" %\
               (Style.BOLD_ON, Style.GREEN, "SUCCESS:",
                Style.RESET, s)
    BOLD_ON = '\033[1m'
    BOLD_OFF = '\033[22m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    RESET = '\033[0m'


def get_last_commit_hash():
    # This command gets the last hash
    command = 'git log --pretty=format:"%H" -1'
    # TODO remove shell param for security
    hash = subprocess.check_output(command, shell=True)
    return hash


def get_files_for_hash(hash):
    # This command get the filenames of a given hash
    command = 'git show --pretty="format:" --name-only %s'
    files = subprocess.check_output(command % hash, shell=True)
    # The first and last are empty
    return files.split("\n")[1:-1]


def get_access_token():
    try:
        f = open('.access_token')
        code = f.next().strip()
        return code
    except IOError:
        print Style.warning_msg('No .access_token found, starting flow!')
    result = start_flow()
    if result is not None:
        print Style.success_msg('Access token stored')
        return result
    else:
        print Style.warning_msg('Failure to push wot dropbox')


def start_flow():
    config = ConfigParser.ConfigParser()
    config.read('./dropbox_keys.ini')
    try:
        app_key = config.get('Keys', 'app_key')
        app_secret = config.get('Keys', 'app_secret')
        flow = dropbox.client.DropboxOAuth2FlowNoRedirect(app_key, app_secret)
        authorize_url = flow.start()
        print '1. Go to: ' + authorize_url
        print '2. Click "Allow" (you might have to log in first)'
        print '3. Copy the authorization code.'
        code = raw_input("Enter the authorization code here: ").strip()
        access_token, user_id = flow.finish(code)
        print access_token
        f = open('.access_token', 'wb')
        f.write('%s\n' % access_token)
        f.close
        return access_token
    except:
        print Style.warning_msg('Cannot read keys from dropbox.ini')
        return None


def upload_file(client, file_name):
    try:
        response = client.put_file(file_name, open(file_name))
        bytes = response['bytes']
        print Style.success_msg("Uploaded: %d bytes for file:%s" % (bytes, file_name))
    except:
        print Style.warning_msg("Couldn't upload file:%s" % file_name)


def main():
    last_hash = get_last_commit_hash()
    files = get_files_for_hash(last_hash)
    token = get_access_token()
    client = dropbox.client.DropboxClient(token)
    for file in files:
        upload_file(client, file)
    print Style.success_msg("Pushed to dropbox")


if __name__ == "__main__":
    main()
